
#include "../src/unity.h"

#include "../../../lib/base/countdown.h"
#include "../../../lib/base/defs.h"
#include "../../../lib/tft/defs_tft.h"
#include "../../../lib/debug/defs_debug.h"
#include "../../../lib/common/hardware.h"
#include "../../../lib/tft/hardware_tft.h"
#include "../../../lib/unit_test/hardware_unit_test.h"
#include "../../../lib/base/global_vars.h"
#include "../../../lib/base/menuControl.h"
#include "../../../lib/base/systemAlarm.h"
#include "../../../lib/base/system.h"
#include "../../../lib/base/stateMachineRoutines.h"
#include "../../../lib/base/validateState.h"
#include "../../../lib/common/keyboard.h"
#include "../../../lib/common/tones.h"
#include "../../../lib/base/cfr.h"
#include "../../../lib/common/crc.h"
#include "../../../lib/base/flash.h"
#include "../../../lib/base/menu.h"
#include "../../../lib/common/conversion.h"
#include "../../../lib/base/setRate.h"
#include "../../../lib/base/lcdconfirm.h"
#include "../../../lib/base/flowCheck.h"
#include "../../../lib/base/adc.h"
#include "../../../lib/common/delays.h"
#include "../../../lib/base/alarms.h"
#include "../../../lib/common/backlight.h"
#include "../../../lib/base/bolus.h"
#include "../../../lib/base/calculations.h"
#include "../../../lib/base/checkServiceHours.h"
#include "../../../lib/common/check_fsr.h"
#include "../../../lib/common/check_status.h"
#include "../../../lib/common/check_timers.h"
#include "../../../lib/base/config.h"
#include "../../../lib/common/syringeData.h"
#include "../../../lib/base/countdown.h"
#include "../../../lib/base/infusion.h"
#include "../../../lib/base/initialise.h"
#include "../../../lib/base/interruptRoutines.h"
#include "../../../lib/base/interrupts.h"
#include "../../../lib/base/eoi.h"
#include "../../../lib/base/neoi.h"
#include "../../../lib/base/kvo.h"
#include "../../../lib/base/logging.h"
#include "../../../lib/base/occlusion.h"
#include "../../../lib/base/power.h"
#include "../../../lib/common/rtc.h"
#include "../../../lib/base/serial.h"
#include "../../../lib/base/startup.h"
#include "../../../lib/base/syringe.h"
#include "../../../lib/base/technician.h"
#include "../../../lib/base/tests.h"
#include "../../../lib/base/calculations.h"
#include "../../../lib/base/timers.h"
#include "../../../lib/common/initRegisters.h"
#include "../../../lib/base/main.h"
#include "../../../lib/base/stackChecks.h"
#include "../../../lib/base/graphics.h"
#include "../../../lib/tft/graphics_tft.h"
#include "../../../lib/base/version.h"
#include "../../../lib/unit_test/display_unit_test.h"

#define UNITY_TEST(STATEFROM, STATETO)	void test_validation_ ## STATEFROM ## _to_ ## STATETO ## _test(void)


void setTestValues(uchar state_timer, uchar main_state, uchar flowValue)
{
	sysAlarmRef = NO_SYSTEM_ALARM_ERROR;
	putFlowValue(FLOW_SERVICE_MENUS);
	_thisState = main_state;
	change_main_state_to(main_state);
	stateTimer = 0;
}

void setupTestValues(uchar source)
{
  vStateBufPtr = 0;
	sysAlarmRef = NO_SYSTEM_ALARM_ERROR;
  change_infusion_ready_state_to (FAST_TRACK_STATE);
	putFlowValue(source);
	_lastState = source;
	_thisState = source;
	stateTimer = 0;
}

uchar no_state_validate_exclusion(uchar state)
{
  if(
    state != WARNING_STATE &&
    state != ALARM_DISPLAY_STATE &&
    state != BAT_WARNING_DISPLAY_STATE &&
    state != OCCLUSION_BACKOFF)
  {
 	  return TRUE;
 	}
  return FALSE;
}
  
void setUp(void)
{
}

void tearDown(void)
{
}


void test_validate_START_STATE(void)
{
  initValidateState(START_STATE);
  vState(START_STATE);

  TEST_ASSERT_EQUAL_HEX8(stateTimer, 0);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// System alarm generated
  TEST_ASSERT_EQUAL_HEX8(START_STATE, _thisState);
  TEST_ASSERT_EQUAL_HEX8(START_STATE, _lastState);
  TEST_ASSERT_EQUAL_HEX8(_thisState, _lastState);
}

void test_validation_START_STATE_to_NEW_INFUSION_DISPLAY_STATE(void)
{
  change_main_state_to(NEW_INFUSION_DISPLAY_STATE);
  vState(NEW_INFUSION_DISPLAY_STATE);
  TEST_ASSERT_EQUAL_HEX8(NEW_INFUSION_DISPLAY_STATE, _thisState);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(stateTimer, 0);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// System alarm generated
  TEST_ASSERT_EQUAL_HEX8(NEW_INFUSION_DISPLAY_STATE, _thisState);
  TEST_ASSERT_EQUAL_HEX8(NEW_INFUSION_DISPLAY_STATE, _lastState);
  TEST_ASSERT_EQUAL_HEX8(_thisState, _lastState);
}

void test_validation_NEW_INFUSION_INPUT_STATE_to_NEW_INFUSION_INPUT_STATE(void)
{
  change_main_state_to(NEW_INFUSION_INPUT_STATE);
  vState(NEW_INFUSION_INPUT_STATE);
  TEST_ASSERT_EQUAL_HEX8(NEW_INFUSION_INPUT_STATE, _thisState);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(stateTimer, 0);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// System alarm generated
  TEST_ASSERT_EQUAL_HEX8(_thisState, _lastState);
}

void test_validation_fails_NEW_INFUSION_INPUT_STATE_to_START_STATE(void)
{
  change_main_state_to(START_STATE);
  vState(START_STATE);
  TEST_ASSERT_EQUAL_HEX8(START_STATE, _thisState);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(stateTimer, 0);			// Statetimer not changed
  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// System alarm generated
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_ALARM_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(ALARM_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == ALARM_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INCORRECT_PERMISSION_TO_RUN_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INCORRECT_PERMISSION_TO_RUN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INCORRECT_PERMISSION_TO_RUN_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_BAT_WARNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BAT_WARNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == BAT_WARNING_INPUT_STATE ||
			count == BAT_WARNING_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CHECK_XY_PAD_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_XY_PAD_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_XY_PAD_STATE ||
			count == CHECK_CARRIAGE_HEAD_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_RESET_TVI_CONFIRMATION_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RESET_TVI_CONFIRMATION_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RESET_TVI_CONFIRMATION_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_START_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(START_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == START_STATE ||
			count == NEW_INFUSION_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INFO_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFO_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFO_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_EOI_MODE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_MODE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_EOI_MODE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_KEYLOCK_PRE_UNLOCK_1(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_PRE_UNLOCK_1);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_PRE_UNLOCK_1 ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CHECK_CASE_CLOSED_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_CASE_CLOSED_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_CASE_CLOSED_INPUT_STATE ||
			count == CONFIRM_TO_RUN_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OCCLUSION_PRESSURE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_PRESSURE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_PRESSURE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_ALARM_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(ALARM_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == ALARM_INPUT_STATE ||
			count == SHUTDOWN_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == ALARM_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_NULL_MAIN_STATE(void)
{
	uchar count;
	uchar testKey;
	
  TEST_IGNORE();

	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NULL_MAIN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
	  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_DISPLAY_LOCK1(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DISPLAY_LOCK1);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DISPLAY_LOCK1 ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_BOLUS_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_BOLUS_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_BOLUS_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_RATE_MODE_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_MODE_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_MODE_MENU_INPUT_STATE ||
			count == SET_RATE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INSERT_CORRECT_SYRINGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INSERT_CORRECT_SYRINGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INSERT_CORRECT_SYRINGE_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SELECT_SYRINGE_DISPLAY_STATE ||
			count == UNRECOGNISED_SYRINGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_KEYLOCK_WARNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_WARNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_WARNING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OCCLUSION_BACKOFF(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_BACKOFF);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_BACKOFF_2 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SHUTDOWN1_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SHUTDOWN1_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SHUTDOWN1_STATE ||
			count == WAIT_SHUTDOWN ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE ||
			count == SET_RATE_MODE_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == CONFIRM_RATE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OPTIONS_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OPTIONS_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OPTIONS_MENU_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == RESET_TVI_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == VIEW_LOGS_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_EOI_MODE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_MODE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_EOI_MODE_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_BOLUS_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_BOLUS_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_BOLUS_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OCCLUSION_PRESSURE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_PRESSURE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_PRESSURE_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_NEOI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEOI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEOI_INPUT_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == OCCLUSION_BACKOFF 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INFUSION_MENU_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFUSION_MENU_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CONFIRM_TITRATION_INPUT_STATE(void)
{
  TEST_IGNORE();
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TITRATION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
//		if
//		(
//
//		)
//		{
//			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
//		}
//		else
//		{	
//  	  if(no_state_validate_exclusion(count))
//      {
//			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
//			}
//		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SELECT_SYRINGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SELECT_SYRINGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SELECT_SYRINGE_INPUT_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == INSERT_CORRECT_SYRINGE_INPUT_STATE ||
			count == SYRINGE_CONFIRMATION_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_NEOI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_NEOI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_NEOI_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_KEY_CLICK_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KEY_CLICK_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KEY_CLICK_INPUT_STATE ||
			count == SET_KEY_CLICK_CONFIRMATION_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CLEAR_VALUES_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEAR_VALUES_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CLEAR_VALUES_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_STOPPED_PURGE_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(STOPPED_PURGE_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CONFIRM_RATE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_RATE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_RATE_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == PURGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_WARNING_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(WARNING_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SERVICE_WARNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CONFIRM_RATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_RATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_NEW_INFUSION_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEW_INFUSION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEW_INFUSION_INPUT_STATE ||
			count == CHECK_XY_PAD_STATE ||
			count == CLEAR_VALUES_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SHUTDOWN_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SHUTDOWN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SHUTDOWN1_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_BOLUS2_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BOLUS2_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == BOLUS2_STATE ||
			count == BOLUS_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_WAIT_SHUTDOWN(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(WAIT_SHUTDOWN);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == WAIT_SHUTDOWN 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

//void test_state_validation_for_CONFIRM_TITRATION_DISPLAY_STATE(void)
//{
//	uchar count;
//	uchar testKey;
//	for(count = 0; count < FINAL_STATE; count++)
//	{
//		setupTestValues(CONFIRM_TITRATION_DISPLAY_STATE);
//		
//	  change_main_state_to(count);
//		vState(count);
//		
//		if
//		(
//
//		)
//		{
//			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
//		}
//		else
//		{	
//  	  if(no_state_validate_exclusion(count))
//      {
//			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
//			}
//		}	
//  }
//}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SETUP_SYSTEM_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_SYSTEM_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_SYSTEM_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_NEOI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEOI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEOI_INPUT_STATE ||
			count == OCCLUSION_BACKOFF 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_KVO_RATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KVO_RATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KVO_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_EOI_PERCENT_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_PERCENT_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_EOI_PERCENT_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_RATE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SET_RATE_UPDATE_DISPLAY_STATE ||
			count == CONFIRM_RATE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_MAIN_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(MAIN_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_INPUT_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == SET_RATE_MODE_MENU_DISPLAY_STATE ||
			count == CHECK_XY_PAD_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == BOLUS_STATE ||
			count == PURGE_DISPLAY_STATE ||
			count == OPTIONS_MENU_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE ||
			count == SHUTDOWN_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_RUNNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RUNNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_INPUT_STATE ||
			count == OCCLUSION_BACKOFF 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SELECT_SYRINGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SELECT_SYRINGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SELECT_SYRINGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_DATE_TIME_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DATE_TIME_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DATE_TIME_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CHECK_CASE_CLOSED_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_CASE_CLOSED_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_CASE_CLOSED_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_VIEW_LOGS_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_LOGS_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_LOGS_WAIT_STATE ||
			count == VIEW_LOGS_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INFUSION_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFUSION_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SET_NEOI_DISPLAY_STATE ||
			count == SET_EOI_PERCENT_DISPLAY_STATE ||
			count == SET_EOI_MODE_DISPLAY_STATE ||
			count == SET_KVO_RATE_DISPLAY_STATE ||
			count == SET_TITRATION_DISPLAY_STATE ||
			count == SET_BOLUS_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_VIEW_DETAIL_LOG_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_DETAIL_LOG_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_DETAIL_LOG_INPUT_STATE ||
			count == VIEW_LOGS_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_VIEW_DETAIL_LOG_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_DETAIL_LOG_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_DETAIL_LOG_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_BAT_WARNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BAT_WARNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == BAT_WARNING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INSERT_CORRECT_SYRINGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INSERT_CORRECT_SYRINGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INSERT_CORRECT_SYRINGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SETUP_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == DATE_TIME_DISPLAY_STATE ||
			count == SETUP_SYSTEM_DISPLAY_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE ||
			count == OCCLUSION_PRESSURE_DISPLAY_STATE ||
			count == SET_KEY_CLICK_DISPLAY_STATE ||
			count == KEY_LOCK 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_DISPLAY_LOCK(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DISPLAY_LOCK);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DISPLAY_LOCK1 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_MAIN_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(MAIN_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_KEY_LOCK(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEY_LOCK);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEY_LOCK1 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_RESET_TVI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RESET_TVI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RESET_TVI_INPUT_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == RESET_TVI_CONFIRMATION_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INFO_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFO_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFO_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_RATE_MODE_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_MODE_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_MODE_MENU_INPUT_STATE ||
			count == SET_RATE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_PURGING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGING_DISPLAY_STATE ||
			count == PURGING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_PURGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CLEARING_VALUES_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEARING_VALUES_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CLEARING_VALUES_WAIT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_BOLUS_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BOLUS_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == BOLUS1_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_RESET_TVI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RESET_TVI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RESET_TVI_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_FINAL_STATE(void)
{
  TEST_IGNORE();
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(FINAL_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
	  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_PURGING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGING_INPUT_STATE ||
			count == STOPPING_PURGE_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_ATTEMPT_TO_RUN_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(ATTEMPT_TO_RUN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_WAIT_STATE ||
			count == INCORRECT_PERMISSION_TO_RUN_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CLEAR_VALUES_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEAR_VALUES_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CLEAR_VALUES_INPUT_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == CLEARING_VALUES_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SERVICE_WARNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SERVICE_WARNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SERVICE_WARNING_INPUT_STATE ||
			count == NEW_INFUSION_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_TITRATION_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_TITRATION_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_TITRATION_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_BOLUS1_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BOLUS1_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == BOLUS1_STATE ||
			count == BOLUS2_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

//void test_state_validation_for_CONFIRM_TITRATION_WAIT_STATE(void)
//{
//	uchar count;
//	uchar testKey;
//	for(count = 0; count < FINAL_STATE; count++)
//	{
//		setupTestValues(CONFIRM_TITRATION_WAIT_STATE);
//		
//	  change_main_state_to(count);
//		vState(count);
//		
//		if
//		(
//
//		)
//		{
//			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
//		}
//		else
//		{	
//  	  if(no_state_validate_exclusion(count))
//      {
//			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
//			}
//		}	
//  }
//}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CONFIRM_TO_RUN_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TO_RUN_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_TO_RUN_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == ATTEMPT_TO_RUN_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OPTIONS_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OPTIONS_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OPTIONS_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_EOI_PERCENT_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_PERCENT_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_EOI_PERCENT_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_RATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_TITRATION_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_TITRATION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_TITRATION_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_UNRECOGNISED_SYRINGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(UNRECOGNISED_SYRINGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == UNRECOGNISED_SYRINGE_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SERVICE_WARNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SERVICE_WARNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SERVICE_WARNING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_RUNNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RUNNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_INPUT_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == OCCLUSION_BACKOFF 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_KEYLOCK_WARNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_WARNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_WARNING_INPUT_STATE ||
			count == KEYLOCK_PRE_UNLOCK ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_UNRECOGNISED_SYRINGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(UNRECOGNISED_SYRINGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == UNRECOGNISED_SYRINGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SYRINGE_CONFIRMATION_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SYRINGE_CONFIRMATION_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SYRINGE_CONFIRMATION_STATE ||
			count == PURGE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CONFIRM_TO_RUN_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TO_RUN_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE ||
			count == INCORRECT_PERMISSION_TO_RUN_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_DATE_TIME_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DATE_TIME_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DATE_TIME_INPUT_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CLEARING_VALUES_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEARING_VALUES_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CLEARING_VALUES_WAIT_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_KVO_RATE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KVO_RATE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KVO_RATE_INPUT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_RUNNING_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RUNNING_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_WAIT_STATE ||
			count == RUNNING_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_VIEW_LOGS_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_LOGS_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_LOGS_DISPLAY_STATE ||
			count == VIEW_LOGS_WAIT_STATE ||
			count == VIEW_LOGS_INPUT_STATE ||
			count == VIEW_DETAIL_LOG_DISPLAY_STATE ||
			count == OPTIONS_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_KEY_LOCK1(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEY_LOCK1);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEY_LOCK1 ||
			count == DISPLAY_LOCK ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_TECHNICIAN_STATE(void)
{
  TEST_IGNORE();
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(TECHNICIAN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
    if(no_state_validate_exclusion(count))
    {
      TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
    }
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_STOPPING_PURGE_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(STOPPING_PURGE_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == STOPPED_PURGE_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_KEYLOCK_PRE_UNLOCK(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_PRE_UNLOCK);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_PRE_UNLOCK_1 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OCCLUSION_BACKOFF_2(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_BACKOFF_2);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_BACKOFF_2 ||
			count == OCCLUSION_BACKOFF_3 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SETUP_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_VIEW_LOGS_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_LOGS_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_LOGS_WAIT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_EOI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(EOI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == EOI_INPUT_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == OCCLUSION_BACKOFF 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_NEW_INFUSION_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEW_INFUSION_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEW_INFUSION_INPUT_STATE ||
			count == CLEAR_VALUES_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE ||
			count == CONFIRM_TO_RUN_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_RATE_UPDATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_UPDATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_OCCLUSION_BACKOFF_3(void)
{
  TEST_IGNORE();
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_BACKOFF_3);
		
	  change_main_state_to(count);
		vState(count);
		
	  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_PURGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGE_INPUT_STATE ||
			count == PURGE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == PURGING_DISPLAY_STATE ||
			count == TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE ||
			count == CHECK_XY_PAD_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_NEOI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_NEOI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_NEOI_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_CHECK_CARRIAGE_HEAD_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_CARRIAGE_HEAD_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_CASE_CLOSED_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_KEY_CLICK_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KEY_CLICK_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KEY_CLICK_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_EOI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(EOI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == EOI_INPUT_STATE ||
			count == OCCLUSION_BACKOFF 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SET_KEY_CLICK_CONFIRMATION_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KEY_CLICK_CONFIRMATION_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KEY_CLICK_CONFIRMATION_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_SETUP_SYSTEM_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_SYSTEM_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_SYSTEM_INPUT_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_for_INFUSION_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFUSION_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}


//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OCCLUSIONBACKOFF(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_BACKOFF);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_BACKOFF_2 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_BOLUS1_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BOLUS1_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == BOLUS2_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_RATE_INPUT_STATE(void)
{
  TEST_IGNORE();
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SET_RATE_UPDATE_DISPLAY_STATE ||
			count == SET_RATE_UPDATE_DISPLAY_STATE ||
			count == CONFIRM_TITRATION_DISPLAY_STATE ||
			count == CONFIRM_RATE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SET_RATE_UPDATE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_BAT_WARNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BAT_WARNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == BAT_WARNING_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SETUP_SYSTEM_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_SYSTEM_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INFUSION_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFUSION_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_ATTEMPT_TO_RUN_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(ATTEMPT_TO_RUN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_WAIT_STATE ||
			count == INCORRECT_PERMISSION_TO_RUN_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INFUSION_MENU_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFUSION_MENU_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CONFIRM_RATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_RATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_NEOI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEOI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEOI_DISPLAY_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_RATE_MODE_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_MODE_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_MODE_MENU_INPUT_STATE ||
			count == SET_RATE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_BOLUS_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_BOLUS_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_KEYLOCK_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEY_LOCK);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEY_LOCK1 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SHUTDOWNSTATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SHUTDOWN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SHUTDOWN1_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_KEYLOCK_WARNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_WARNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_PRE_UNLOCK ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_VIEW_DETAIL_LOG_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_DETAIL_LOG_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_DETAIL_LOG_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_EOI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(EOI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SETUP_SYSTEM_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_SYSTEM_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_SYSTEM_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_WARNING_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(WARNING_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == EOI_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == SERVICE_WARNING_DISPLAY_STATE ||
			count == BAT_WARNING_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SERVICE_WARNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SERVICE_WARNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SERVICE_WARNING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CHECK_CASE_CLOSED_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_CASE_CLOSED_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_TO_RUN_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_RUNNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RUNNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_NEOI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_NEOI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_UNRECOGNISED_SYRINGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(UNRECOGNISED_SYRINGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CONFIRM_TO_RUN_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TO_RUN_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INCORRECT_PERMISSION_TO_RUN_STATE ||
			count == CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INCORRECT_PERMISSION_TO_RUN_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INCORRECT_PERMISSION_TO_RUN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_MAIN_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(MAIN_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == SET_RATE_DISPLAY_STATE ||
			count == SET_RATE_MODE_MENU_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == CHECK_XY_PAD_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == BOLUS_STATE ||
			count == PURGE_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == OPTIONS_MENU_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == SHUTDOWN_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_DATE_TIME_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DATE_TIME_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DATE_TIME_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_TECHNICIAN_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(TECHNICIAN_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OCCLUSION_BACKOFF_2(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_BACKOFF_2);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_BACKOFF_3 ||
			count == OCCLUSION_BACKOFF_3 ||
			count == OCCLUSION_BACKOFF_3 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_KEY_CLICK_CONFIRMATION_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KEY_CLICK_CONFIRMATION_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CONFIRM_TO_RUN_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TO_RUN_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == ATTEMPT_TO_RUN_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CONFIRM_RATE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_RATE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == PURGE_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_KEYLOCKPREUNLOCK1(void)
{
  TEST_IGNORE();
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_PRE_UNLOCK_1);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OCCLUSIONBACKOFF3(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_BACKOFF_3);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INFO_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFO_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == INFO_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_EOI_PERCENT_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_PERCENT_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_EOI_PERCENT_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_VIEW_LOGS_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_LOGS_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OPTIONS_MENU_DISPLAY_STATE ||
			count == VIEW_LOGS_DISPLAY_STATE ||
			count == VIEW_LOGS_WAIT_STATE ||
			count == VIEW_LOGS_DISPLAY_STATE ||
			count == VIEW_LOGS_WAIT_STATE ||
			count == VIEW_DETAIL_LOG_DISPLAY_STATE ||
			count == OPTIONS_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_EOI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(EOI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == EOI_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SYRINGE_CONFIRMATION_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SYRINGE_CONFIRMATION_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == PURGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_KEY_CLICK_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KEY_CLICK_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KEY_CLICK_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_TITRATION_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_TITRATION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_EOI_MODE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_MODE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_RESET_TVI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RESET_TVI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RESET_TVI_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_NEW_INFUSION_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEW_INFUSION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_XY_PAD_STATE ||
			count == CLEAR_VALUES_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

//void test_state_validation_against_stateMachineRoutines_for_CONFIRM_TITRATION_WAIT_STATE(void)
//{
//	uchar count;
//	uchar testKey;
//	for(count = 0; count < FINAL_STATE; count++)
//	{
//		setupTestValues(CONFIRM_TITRATION_WAIT_STATE);
//		
//	  change_main_state_to(count);
//		vState(count);
//		
//		if
//		(
//			count == RUNNING_DISPLAY_STATE 
//		)
//		{
//			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
//		}
//		else
//		{	
//  	  if(no_state_validate_exclusion(count))
//      {
//			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
//			}
//		}	
//  }
//}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_RUNNING_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RUNNING_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}
			
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OPTIONS_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OPTIONS_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == RESET_TVI_DISPLAY_STATE ||
			count == VIEW_LOGS_DISPLAY_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_WAITSHUTDOWN(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(WAIT_SHUTDOWN);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_BOLUS_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BOLUS_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == BOLUS1_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_KEYLOCK_WARNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_WARNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_WARNING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_KVO_RATE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KVO_RATE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CHECK_CARRIAGE_HEAD_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_CARRIAGE_HEAD_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_CASE_CLOSED_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_START_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(START_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEW_INFUSION_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_PURGING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGING_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_STOPPED_PURGE_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(STOPPED_PURGE_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INFO_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFO_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFO_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_RESET_TVI_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RESET_TVI_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == RESET_TVI_CONFIRMATION_STATE ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SELECT_SYRINGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SELECT_SYRINGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == INSERT_CORRECT_SYRINGE_INPUT_STATE ||
			count == SYRINGE_CONFIRMATION_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_RATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_TITRATION_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_TITRATION_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_TITRATION_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_RUNNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RUNNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_WARNING_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_PURGING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == STOPPING_PURGE_STATE ||
			count == STOPPING_PURGE_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SETUP_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == DATE_TIME_DISPLAY_STATE ||
			count == SETUP_SYSTEM_DISPLAY_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE ||
			count == OCCLUSION_PRESSURE_DISPLAY_STATE ||
			count == SET_KEY_CLICK_DISPLAY_STATE ||
			count == KEY_LOCK ||
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

//void test_state_validation_against_stateMachineRoutines_for_CONFIRM_TITRATION_DISPLAY_STATE(void)
//{
//  TEST_IGNORE();
//	uchar count;
//	uchar testKey;
//	for(count = 0; count < FINAL_STATE; count++)
//	{
//		setupTestValues(CONFIRM_TITRATION_DISPLAY_STATE);
//		
//	  change_main_state_to(count);
//		vState(count);
//		
//		if
//		(
//			count == CONFIRM_TITRATION_INPUT_STATE 
//		)
//		{
//			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
//		}
//		else
//		{	
//  	  if(no_state_validate_exclusion(count))
//      {
//			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
//			}
//		}	
//  }
//}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_BOLUS_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_BOLUS_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_BOLUS_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_KEYLOCK1_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEY_LOCK1);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DISPLAY_LOCK ||
			count == DISPLAY_LOCK ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_DISPLAYLOCK1STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DISPLAY_LOCK1);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_EOI_PERCENT_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_PERCENT_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == INFUSION_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_VIEW_DETAIL_LOG_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_DETAIL_LOG_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_LOGS_DISPLAY_STATE ||
			count == VIEW_LOGS_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_RESET_TVI_CONFIRMATION_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(RESET_TVI_CONFIRMATION_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == RUNNING_DISPLAY_STATE ||
			count == NEOI_DISPLAY_STATE ||
			count == EOI_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_UNRECOGNISED_SYRINGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(UNRECOGNISED_SYRINGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == UNRECOGNISED_SYRINGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

//void test_state_validation_against_stateMachineRoutines_for_CONFIRM_TITRATION_INPUT_STATE(void)
//{
//	uchar count;
//	uchar testKey;
//	for(count = 0; count < FINAL_STATE; count++)
//	{
//		setupTestValues(CONFIRM_TITRATION_INPUT_STATE);
//		
//	  change_main_state_to(count);
//		vState(count);
//		
//		if
//		(
//			count == RUNNING_DISPLAY_STATE ||
//			count == CONFIRM_TITRATION_WAIT_STATE 
//		)
//		{
//			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
//		}
//		else
//		{	
//  	  if(no_state_validate_exclusion(count))
//      {
//			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
//			}
//		}	
//  }
//}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_RATE_UPDATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_UPDATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CLEAR_VALUES_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEAR_VALUES_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CLEAR_VALUES_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_NEOI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_NEOI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_NEOI_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INFUSION_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INFUSION_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SET_NEOI_DISPLAY_STATE ||
			count == SET_EOI_PERCENT_DISPLAY_STATE ||
			count == SET_EOI_MODE_DISPLAY_STATE ||
			count == SET_KVO_RATE_DISPLAY_STATE ||
			count == SET_TITRATION_DISPLAY_STATE ||
			count == SET_BOLUS_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SERVICE_WARNING_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SERVICE_WARNING_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEW_INFUSION_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CONFIRM_TO_RUN_SEND_SECONDARY_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CONFIRM_TO_RUN_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CLEARING_VALUES_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEARING_VALUES_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CLEARING_VALUES_WAIT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CHECK_XY_PAD_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_XY_PAD_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_CARRIAGE_HEAD_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_KEYLOCKPREUNLOCK(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(KEYLOCK_PRE_UNLOCK);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == KEYLOCK_PRE_UNLOCK_1 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_KEY_CLICK_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KEY_CLICK_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KEY_CLICK_CONFIRMATION_STATE ||
			count == SET_KEY_CLICK_CONFIRMATION_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_KVO_RATE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_KVO_RATE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_KVO_RATE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_VIEW_LOGS_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_LOGS_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_LOGS_WAIT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_STOPPING_PURGE_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(STOPPING_PURGE_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == STOPPED_PURGE_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SHUTDOWN1_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SHUTDOWN1_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == WAIT_SHUTDOWN ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_EOI_MODE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_EOI_MODE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_EOI_MODE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OCCLUSION_PRESSURE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_PRESSURE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INFUSION_MENU_WAIT_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_MAIN_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(MAIN_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SETUP_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SETUP_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_VIEW_LOGS_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(VIEW_LOGS_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == VIEW_LOGS_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_NEOI_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEOI_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEOI_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_ALARM_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(ALARM_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == ALARM_DISPLAY_STATE ||
			count == SHUTDOWN_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INSERT_CORRECT_SYRINGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INSERT_CORRECT_SYRINGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INSERT_CORRECT_SYRINGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_NEW_INFUSION_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(NEW_INFUSION_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == NEW_INFUSION_INPUT_STATE ||
			count == CLEAR_VALUES_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CHECK_CASE_CLOSED_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CHECK_CASE_CLOSED_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == CHECK_CASE_CLOSED_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CLEARING_VALUES_WAIT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEARING_VALUES_WAIT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_PURGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == PURGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_DISPLAYLOCK_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DISPLAY_LOCK);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == DISPLAY_LOCK1 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_CLEAR_VALUES_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(CLEAR_VALUES_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == INSERT_CORRECT_SYRINGE_DISPLAY_STATE ||
			count == CLEARING_VALUES_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_MODE_MENU_DISPLAY_STATE ||
			count == SET_RATE_MODE_MENU_DISPLAY_STATE ||
			count == CONFIRM_RATE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OCCLUSION_PRESSURE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OCCLUSION_PRESSURE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OCCLUSION_PRESSURE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == TWENTY_FOUR_HOUR_INFUSION_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_INSERT_CORRECT_SYRINGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(INSERT_CORRECT_SYRINGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == SELECT_SYRINGE_DISPLAY_STATE ||
			count == UNRECOGNISED_SYRINGE_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_DATE_TIME_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(DATE_TIME_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SETUP_MENU_DISPLAY_STATE ||
			count == SETUP_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_OPTIONS_MENU_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(OPTIONS_MENU_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == OPTIONS_MENU_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_PURGE_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(PURGE_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == MAIN_MENU_DISPLAY_STATE ||
			count == CHECK_XY_PAD_STATE ||
			count == CHECK_XY_PAD_STATE ||
			count == PURGE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == PURGING_DISPLAY_STATE ||
			count == TWENTY_FOUR_HOUR_INFUSION_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == CHECK_XY_PAD_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_BAT_WARNING_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BAT_WARNING_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}
			
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_BOLUS2_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(BOLUS2_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
	  if(no_state_validate_exclusion(count))
    {
		  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
		}
			
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_ALARM_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(ALARM_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == ALARM_INPUT_STATE ||
			count == ALARM_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SELECT_SYRINGE_DISPLAY_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SELECT_SYRINGE_DISPLAY_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SELECT_SYRINGE_INPUT_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}

//  .   .   .   .   .   .   .   .

void test_state_validation_against_stateMachineRoutines_for_SET_RATE_MODE_MENU_INPUT_STATE(void)
{
	uchar count;
	uchar testKey;
	for(count = 0; count < FINAL_STATE; count++)
	{
		setupTestValues(SET_RATE_MODE_MENU_INPUT_STATE);
		
	  change_main_state_to(count);
		vState(count);
		
		if
		(
			count == SET_RATE_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE ||
			count == MAIN_MENU_DISPLAY_STATE 
		)
		{
			TEST_ASSERT_EQUAL_HEX8(NO_SYSTEM_ALARM_ERROR, sysAlarmRef);	// Check for no system alarm generated
		}
		else
		{	
  	  if(no_state_validate_exclusion(count))
      {
			  //TEST_ASSERT_EQUAL_HEX8(STATE_VALIDATION_ERROR, sysAlarmRef);	// Check for correct system alarm
			}
		}	
  }
}
