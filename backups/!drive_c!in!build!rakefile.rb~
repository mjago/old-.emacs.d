require 'rake/clean'
require 'rake/loaders/makefile'
require 'fileutils'
require 'set'
require 'rakefile_helper'
require 'mcp_parser.rb'
include RakefileHelpers

desc "Build and generate base_tft downloadable fdl file and presto."
task :default => [:all, :summary]

#This builds and runs all the unit tests
task :all do
  #  loop do
  #display_version
  puts
  colour_puts(:narrative, "checking tool versions...")
  check_tool_versions
  ASSEMBLER = "#{$build_tool[:assembler][:path]}#{$build_tool[:assembler][:name]}"
  COMPILER = "#{$build_tool[:compiler][:path]}#{$build_tool[:compiler][:name]}"
  LINKER = "#{$build_tool[:linker][:path]}#{$build_tool[:linker][:name]}"  

  colour_puts(:narrative,"building Main Code...")
  puts ""
  delete_object_files
  buildPrimaryCode
  delete_object_files
  buildSecondaryCode
  delete_object_files
#  end
end

#This runs our test summary
task :summary do
  #  flush_output
  puts "Build Finished!"
end

def buildPrimaryCode
  source_files = McpParser.extract_source
  source_files.each do |file|
    if file =~ /\.c$/i
      compile(file,
              '-fo=' + BUILD_FDL_PATH + '\\' + File.basename(file).downcase.gsub('.c', OBJ_EXTENSION),
              PRIMARY_PROCESSOR,
              PRIMARY_DEFINES,
              PRIMARY_TFT_SOURCE_PATHS,
              PRIMARY_OPTIMIZATION)
    elsif file =~ /.asm$/i
      assemble(file.gsub('/', '\\'),
               BUILD_FDL_PATH + '\\' + File.basename(file).downcase.gsub('.asm', OBJ_EXTENSION),
               PRIMARY_PROCESSOR)
    end	
  end

  link(File.join(PRI_OUT_PATH,BUILD_TYPE + BIN_EXTENSION),
       PRIMARY_TFT_LINKER_FILE,
       PRIMARY_LIB_PATH,
       PRIMARY_LIBRARIES)
  
  build_hex(BUILD_TYPE,:fdl_upload)
  build_fdl(BUILD_TYPE,:fdl_upload)
  build_hex(BUILD_TYPE, :presto_upload)
  cleanup_out_files(BUILD_TYPE)
end

def buildSecondaryCode
  run_file = ""
  
  #assemble sec source files
  SECONDARY_SOURCE_PATHS.each do |path|
    Dir[path +'/*.asm'].each do |file|
      assemble(file.gsub('/', '\\'), BUILD_FDL_PATH+'/'+File.basename(file).gsub('.asm', OBJ_EXTENSION), SECONDARY_PROCESSOR) 
    end	
  end

  #compile sec source files
  SECONDARY_SOURCE_PATHS.each do |path|
    Dir[path +'/*.c'].each do |file|
      compile(file,
              '-fo=' + BUILD_FDL_PATH + '/' + File.basename(file).gsub('.c', OBJ_EXTENSION),
              SECONDARY_PROCESSOR,
              SECONDARY_DEFINES,
              SECONDARY_SOURCE_PATHS,
              SECONDARY_OPTIMIZATION)
    end	
  end
  
  link(File.join(PRI_OUT_PATH,SEC_OUTPUT_FILE + BIN_EXTENSION),
       SECONDARY_LINKER_FILE,
       SECONDARY_LIB_PATH,
       SECONDARY_LIBRARIES)
  
  generate_output_files_sec()
  cleanup_out_files(SEC_OUTPUT_FILE)
end
