
require 'rubygems'
require 'statemachine'
require File.expand_path(File.join(File.dirname(__FILE__),'lifeline'))
require File.expand_path(File.join(File.dirname(__FILE__),'main_state'))
require "win32console"
	
#   #   #   #   

class Tertiary
	attr_accessor :lifeline
	attr_accessor :status_lines
	attr_accessor :key
	attr_accessor :resources
	attr_accessor :unit_startup_scenario
	attr_accessor :operating
	def initialize
		@lifeline = Lifeline.new
		@lifeline.value = :low
		@status_lines = StatusLines.new
		@key = Key.new
		@resources = :initialised
		@unit_startup_scenario = :fresh_build
		@operating = OperatingState.new
	end
end
	
#   #   #   #   

class OperatingState
	def initialize
		@operating_state = :awake
	end
	def state=(op_state)
		@operating_state = check_value(op_state)
	end
	def state
		@operating_state
	end
	def check_value op_state
		case op_state
		when  :awake,:sleeping,:off_no_vbak
		else
			raise 'illegal operating state'
		end
		op_state
	end
end
	
#   #   #   #   

class StatusLines
	def value
		raise 'status indeterminate - no point reading here'
	end
	def set_by_unit value
		@status = check_status_lines_value(value)
	end
	def check_status_lines_value status
		case status
		when :run_status, :production_status, :pre_off_2_status, :pre_off_1_status, :off_status
		else
			raise'illegal status'
		end
	end
end
	
#   #   #   #   

class Key
	def initialize
		@on = :released
		@cancel = :released
	end
	def on?
		@on
	end
	def on action
		case action
		when :pressed,:released
			@on = action
			case @on
				when :pressed
				case operating.state
					when :sleeping
						operating.state = :awake
					end
				end
			end
		else
			raise 'unknown key action'
		end
		action
	end
	def cancel?
		@cancel
	end
	def cancel action
		case action
		when :pressed,:released
			@cancel = action
		else
			raise 'unknown key action'
		end
		action
	end
end	
	
#   #   #   #   

class TertiaryModes
	@main_state = Statemachine.build do
		trans :init_state, :initialised_trans, :cold_start_state
		trans :cold_start_state, :idle_trans, :idle_state
		trans :idle_state, :power_up_trans, :power_up_state
	end
end
	
#   #   #   #   

class StateMachines
	def initialize
	end

	@statuses = []

	def state(state = :cold_start)
		@state = state
	end
	
	def lifeline?(lifeline = :factory_build)
		case lifeline 
		when :factory_build, :final_build
			@lifeline = lifeline
		else
			raise 'impossible_lifeline_state'
		end
	end
end

#   #   #   #   

if __FILE__ == $0
	puts OperatingState.new.state=(:awake)
end
