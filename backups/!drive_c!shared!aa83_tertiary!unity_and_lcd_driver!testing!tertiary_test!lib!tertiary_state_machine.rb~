require 'rubygems'
require 'statemachine'
require "win32console"

class MainStateMachine
	def initialize
		@main_state_machine = Statemachine.build do
			trans :init_state, :initialised_trans, :cold_start_state
			trans :cold_start_state, :idle_trans, :idle_state
			trans :idle_state, :power_up_trans, :power_up_state
		end
	
		@states = [	:cold_start_state,
										:warm_start_state
								]
		
	end
end	

class TertiaryModes
	@main_state_machine = Statemachine.build do
		trans :init_state, :initialised_trans, :cold_start_state
		trans :cold_start_state, :idle_trans, :idle_state
		trans :idle_state, :power_up_trans, :power_up_state
	end
end
	
class StateMachines
	def initialize
	end

	@statuses = []

	def state(state = :cold_start)
		@state = state
	end
	
	def lifeline?(lifeline = :factory_build)
		case lifeline 
		when :factory_build, :final_build
			@lifeline = lifeline
		else
			raise 'impossible_lifeline_state'
		end
	end
	
	def power_switch_pressed?(status = :released)
		case status
		when :pressed
			true
		when :released
			false
		else
			raise 'impossible_keypress'
		end
	end
	
	def status(status = :indeterminate)
		case status
		when :indeterminate
		else
		end
	end
	
end

#~ class TertiaryColdStart

  #~ attr_accessor = :state

  #~ def initialize
    #~ @state = :init_cold_start_state
		#~ puts @state
  #~ end

  #~ def state_machine
  #~ end
#~ end

#~ if __FILE__ == $0
  
	#~ @tcs =TertiaryColdStart.new		
  #~ puts @tcs.process
  #~ @tcs = nil
#~ end
#~ class TertiaryColdStart

  #~ attr_accessor = :state

  #~ def initialize
    #~ @state = :init_cold_start_state
		#~ puts @state
  #~ end

  #~ def state_machine
  #~ end
#~ end

#~ if __FILE__ == $0
  
	#~ @tcs =TertiaryColdStart.new		
  #~ puts @tcs.process
  #~ @tcs = nil
#~ end
