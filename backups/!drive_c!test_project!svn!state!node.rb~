
$data = []

class BuildStateMachine
  @state_data_path = nil

    def is_node_format?(node)
    return false if not node.class == Array
    node.each do |n|
      if not n.class == Symbol
        return false
      end
    end
      transition = node[STATE_TRANSITION].to_s
    return false if not transition[-1..-1] == '!'
      from_state = node[FROM_STATE].to_s
    return false if not from_state[-6..-1] == '_state'
    to_state = node[TO_STATE].to_s
    return false if not to_state[-6..-1] == '_state'
  end

  def parse_node(state_data_path)
    temp = []
    @state_data_path = state_data_path
    File.open(@state_data_path,'r') do |f|
      f.each_line do |line|
        line.each(' ') do |e|
          temp.push e
        end
      end
    end  
    if temp[0].strip! == 'node'
      temp.delete_at 0
      temp.size.times { |x|  temp[x] = temp[x].to_sym }
      if is_node_format? temp
        node temp[0], temp[1], temp[2]
      end
    end
    true  
  end
  
  def node(from_state, transition, to_state)
    $data.push [from_state, transition, to_state]
    true
  end
  
end


