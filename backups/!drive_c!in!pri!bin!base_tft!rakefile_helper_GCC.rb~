#This rakefile sets you up to use GCC as your compiler for tests
module RakefileConstants
  
  C_EXTENSION = '.c'

  def Kernel.is_windows?
    processor, platform, *rest = RUBY_PLATFORM.split("-")
    platform == 'mswin32'
  end

  OBJ_EXTENSION = '.o'
  BIN_EXTENSION = '.cof'

  BUILD_PATH = 'buildfdls'
  PRI_OUTPUT_FILE = 'PriBase'
  SEC_OUTPUT_FILE = 'SecBase'
  
  PRIMARY_PROCESSOR = '18F8720'
  PRIMARY_DEFINES = '_FINAL=2'
  PRIMARY_SOURCE_PATHS = %w'../../lib/base ../../lib/common ../../lib/debug ../../lib/tft'
  PRIMARY_LINKER_FILE = '..\..\lib\base\18F8720.LKR'
  PRIMARY_LIBRARIES='p18f8720.lib clib.lib'
  PRIMARY_LINK_PATHS='/l..\..\lib\lib /l..\..\lib\base'
  PRIMARY_OPTIMIZATION='-scs -mL -pa=4'
  
  SECONDARY_PROCESSOR = '18F2520'
  SECONDARY_DEFINES = '_FINAL=2'
  SECONDARY_SOURCE_PATHS = %w'../../../sec'
  SECONDARY_LINKER_FILE = '..\..\..\sec\18F2520.LKR'
  SECONDARY_LIBRARIES= '..\..\..\sec\p18f2520.lib ..\..\..\sec\clib.lib'
  SECONDARY_OPTIMIZATION='-mL -pa=5'
#  clib.lib'
  SECONDARY_LINK_PATHS='/l..\..\..\sec'
  
  ASSEMBLER='mpasmwin'
  COMPILER = 'mcc18'
  LINKER   = 'mplink'  
end

module RakefileHelpers
  include RakefileConstants

  def flush_output
    $stderr.flush
    $stdout.flush
  end
  
  def report message
    puts message
    flush_output
  end

  def assemble src, obj, processor
    msg = "#{ASSEMBLER} /q /p#{processor} #{src} /o#{obj}"
    puts msg
    execute msg
  end

  def compile src, obj, processor, defines, source_paths, optimization
    msg = "#{COMPILER} -d#{defines} -p=#{processor} -I#{source_paths.join(' -I')} #{src} -o #{obj} #{optimization}"
    puts msg
    execute msg
  end

  def link prerequisites, executable, linkerfile, link_paths, libraries
		puts "Linking..."
		puts
    msg = "#{LINKER} #{link_paths} #{linkerfile} #{prerequisites} #{libraries} /o #{executable}"
    puts msg
    puts
    execute msg
  end

def generate_output_files_pri()
    puts "Generate FDL UPLOAD"
    msg = "MP2HEX /a INHX32 /r 0x0000-0x1FCFF /q #{BUILD_PATH}/#{PRI_OUTPUT_FILE}.cof"
    puts msg
    execute msg
    msg = "HexConverter #{BUILD_PATH}/#{PRI_OUTPUT_FILE}.hex"
    puts msg
    execute msg
    
    puts "Generate PRESTO UPLOAD"
    msg = "MP2HEX /a INHX32 /r 0x0000-0x30000D /q #{BUILD_PATH}/#{PRI_OUTPUT_FILE}.cof"
    puts msg
    execute msg
end

def generate_output_files_sec()
    puts "Generate FDL UPLOAD"
    msg = "MP2HEX /a INHX32 /r 0x0000-0x1FCFF /q #{BUILD_PATH}/#{SEC_OUTPUT_FILE}.cof"
    puts msg
    execute msg
    msg = "HexConverter #{BUILD_PATH}/#{SEC_OUTPUT_FILE}.hex"
    puts msg
    execute msg
    
    puts "Generate PRESTO UPLOAD"
    msg = "MP2HEX /a INHX32 /r 0x0000-0x30000D /q #{BUILD_PATH}/#{SEC_OUTPUT_FILE}.cof"
    puts msg
    execute msg
end
  
private #####################

  def execute command_string
    #~ report command_string
    output = `#{command_string}`
    report output
    output
  end

end
